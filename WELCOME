SYNTAX ANALYSIS:
  Bottom-Up Parsing:
    > SHIFT-REDUCE PARSERS
      > Handles: identifying handles in RSFs.
      > Conflicts in SR parsers
      > Handle Pruning
      > Actions of shift-reduce parser; Basic Design;
      > OPERATOR-PRECEDENCE PARSERS
        > Operator Grammars
        > Relations in Operator-Precedence Parsers
        > Algorithm: Operator-Precedence Parsing
        > Algorithm: Operator-Precedence Functions (construction)


Here are links to resources from different universities that I think are great to refer to while learning compiler design:

I like her explanation of why we do things a certain way. Unfortunately, her courses refers the new edition of the "Dragon" book.
http://web.cs.iastate.edu/~weile/cs440.540/

Another course that refers to the new edition. But things like Run-time environment is well explained here:
http://user.it.uu.se/~kostis/Teaching/KT1-11/

This site actually does touch by most topics in the textbook:
https://www.cs.fsu.edu/~engelen/courses/COP5621/

Things like Bootstrapping can be referred here:
http://homes.et.aau.dk/akh/2011/complierconst-2011.html

For Operator Precedence Parsers:
http://faculty.sist.shanghaitech.edu.cn/faculty/songfu/course/fall2018/CS131/slides/chapter4-4.pdf
http://www.math.uni.lodz.pl/~robpleb/Wyklad_9_ang.pdf

For some reason our course followed the old edition of the "Dragon" book, while I think the new version is much simple and easy to grasp. 
